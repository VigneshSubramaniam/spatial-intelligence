{"version":3,"sources":["ground_floor.png","Builder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Builder","props","clearCroparea","setState","crop","x","y","width","height","selectedBlock","showAssetDetails","allAssets","showAllAssets","showAllTickets","onImageLoaded","image","onCropComplete","onCropChange","document","getElementsByClassName","scrollTop","state","allowEdit","createBlock","blocks","allBlocks","cloneDeep","newBlock","push","deleteBlock","index","splice","renderBlocks","context","params","allTickets","hawkEyeMode","data","page","style","map","item","idx","itemColor","color","currentAssetTicket","length","find","el","prop","asset","id","associations","display_id","Object","keys","styleMap","ticket","priority_name","toLowerCase","Block","isSelected","onClick","viewAssetDetails","saveMappings","client","filter","i","db","set","then","interface","trigger","type","message","catch","error","delete","field","OverlayAssetDetail","AssetTitle","name","className","Subsection","ci_type_name","Splitter","business_impact","Field","SubField","getAllTickets","request","get","headers","Authorization","res","JSON","parse","response","allTicketsWithAssets","count","forEach","this","bind","console","mapAssetDetails","mapcurrentAsset","updatedSelectedBlock","showSelectedAsset","modifiedBlocks","arr","indexOf","Overlay","AssetTypes","noHover","AssetName","Asset","textOverflow","overflow","whiteSpace","title","subject","requester_name","status_name","toogleTicketOverLay","renderLegends","LegendWrapper","Legend","Color","LegendLabel","assetId","toString","addEventListener","handleKeyDown","e","keyCode","Section","src","onComplete","onChange","Button","secondary","Component","styled","div","button","App","initialiseApp","window","app","initialized","_client","instance","clientLoaded","React","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.594f21bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ground_floor.d5f13282.png\";","import React, { Component } from 'react';\nimport map from './ground_floor.png'\nimport styled from 'styled-components'\nimport ReactCrop, { makeAspectCrop } from 'react-image-crop'\nimport 'react-image-crop/dist/ReactCrop.css'\nimport './Builder.css';\nimport { cloneDeep, isEqual } from 'lodash'\nimport {Tooltip} from 'react-tippy'\nimport { isDeepStrictEqual } from 'util';\n\n\nclass Builder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            crop: {\n                x: 10,\n                y: 10,\n                width: 0,\n                height: 0,\n            },\n            selectedBlock: null,\n            blocks: [],\n            showAllAssets: false,\n            showAssetDetails: false,\n            allAssets:[],\n            allTickets: [],\n            showAllTickets: false,\n            allowEdit: false\n        }\n        \n        this.styleMap = {\n            \"low\": {\n                \"backgroundColor\": \"#1CB697\",\n                \"boxShadow\": \"0 2px 4px 0 #00B797, 0 2px 10px 0 #00B897\"\n            },\n            \"medium\": {\n                \"backgroundColor\": \"#459FFC\",\n                \"boxShadow\": \"0 2px 4px 0 #459FFC, 0 2px 10px 0 #459FFC\"\n            },\n            \"high\":{\n                \"backgroundColor\": \"#F69A3C\",\n                \"boxShadow\": \"0 2px 4px 0 #F89B2D, 0 2px 10px 0 #F89B2D\"\n            },\n            \"urgent\":{\n                \"backgroundColor\": \"#FF5959\",\n                \"boxShadow\": \"0 2px 4px 0 #FF5959, 0 2px 10px 0 #FF5959\"\n            }\n        }\n    }\n\n    componentDidMount() {        \n        const {context, client} = this.props.params;\n        if(client && client.db){\n            client.db.get('asset_mappings').then(function(data){\n                if(data && context.data.page == \"hawk_eye\"){\n                    this.getAllTickets()\n                    let allBlocks = [];\n                    for(var prop in data){\n                        allBlocks.push(data[prop])\n                    }\n                    this.setState({blocks : allBlocks})\n                }\n                else if(data && Object.keys(data).indexOf(context.data.assetId.toString()) > -1){\n                    this.setState({blocks : [data[context.data.assetId]]})\n                }\n                \n            }.bind(this))\n        }\n        if(context && context.data && context.data.page !== \"ticket\"){\n            this.setState({allowEdit: true})\n        }\n        document.addEventListener('keydown', this.handleKeyDown.bind(this));\n    }\n\n    handleKeyDown(e) {\n        const {context} = this.props.params;\n        if(context.data.page !== \"hawk_eye\") {\n            switch (e.keyCode) {\n                case 13://enter\n                    this.createBlock();\n                    break;\n                case 8://delete\n                     this.deleteBlock();\n                    break;\n                case 27://esc\n                    break;\n            }\n        }\n        this.clearCroparea()\n    }\n\n    clearCroparea = () => {\n        this.setState({\n            crop: {\n                x: 10,\n                y: 10,\n                width: 0,\n                height: 0,\n            },\n            selectedBlock: null,\n            showAssetDetails: false,\n            allAssets:[],\n            showAllAssets: false,\n            showAllTickets: false\n\n        })\n    }\n\n    onImageLoaded = image => {\n    }\n\n    onCropComplete = crop => {\n    }\n\n    onCropChange = crop => {\n        crop.y = document.getElementsByClassName('ReactCrop')[0].scrollTop + crop.y;\n        if(this.state.allowEdit){\n            this.setState({ crop })\n        }\n    }\n\n    createBlock = () => {\n        const { selectedBlock, blocks } = this.state;\n        let allBlocks = cloneDeep(blocks);\n        const newBlock = this.state.crop;\n        allBlocks.push(newBlock);\n        this.setState({ blocks: allBlocks });\n    }\n\n    deleteBlock = (index) => {\n        const { selectedBlock, blocks } = this.state;\n        if(selectedBlock >= 0){\n            let allBlocks = cloneDeep(blocks);\n            allBlocks.splice(selectedBlock, 1);\n            this.setState({ blocks: allBlocks });\n        } \n    }\n\n    renderBlocks = () => {\n        const {context} = this.props.params;\n        const { selectedBlock, blocks, allTickets } = this.state;\n        \n        let hawkEyeMode = context.data.page === \"hawk_eye\";\n        let modifiedBlocks = blocks;\n        let style = {}\n        return (\n            modifiedBlocks.map((item, idx) => {\n                let itemColor = item.color;\n                let currentAssetTicket = {};\n                if (hawkEyeMode && allTickets.length) {\n                    currentAssetTicket = allTickets.find(el => {\n                        for(var prop in el.asset){\n                            if(el.asset[prop].id === item.associations.display_id) return true\n                        }\n                })\n                if(currentAssetTicket && Object.keys(currentAssetTicket).length){\n                    itemColor = this.styleMap[currentAssetTicket.ticket.priority_name.toLowerCase()];\n                }    \n                }\n                if(typeof item.color === \"string\" && item.color.length){\n                    itemColor = item.color;\n                }\n                else{\n                    style = itemColor ? itemColor : {};\n                    itemColor = \"\"\n                }\n                return (\n                    // <Tooltip\n                    //     position=\"bottom\"\n                    //     trigger=\"mouseenter\"\n                    //     delay={500}\n                    //     animation=\"shift\"\n                    //     arrow\n                    //     distance={-60}\n                    //     inertia={true}\n                    //     duration={500}\n                    //     className=\"table-tooltip\"\n                    //     hideDelay={200}\n                    //     title=\"Space troopers\"\n                    // >\n                    <Block item={item} style={style} isSelected={idx == this.state.selectedBlock} color={itemColor} onClick={() => {\n                        this.setState({ selectedBlock: idx })\n                        this.viewAssetDetails(idx);\n                    }}></Block>\n                    // </Tooltip>\n                )\n            })\n        )\n    }\n\n    saveMappings = () => {\n        const {blocks} = this.state;\n        const {client} = this.props.params;\n        let filteredBlocks = blocks.filter(item => item.associations).map(item => {\n            \n            return{\n                [item.associations.display_id]: item\n            }\n        })\n        let map = {};\n        for(let i=0;i<blocks.length;i++){\n            if(blocks[i].associations){\n                map[blocks[i].associations.display_id] = blocks[i];\n            }\n        }\n        if(Object.keys(map).length){\n            client.db.set(\"asset_mappings\", map).then(function (data) {\n                client.interface.trigger(\"showNotify\", {\n                    type: \"success\",\n                    message: \"Pulished successfully\"\n                  /* The \"message\" should be plain text */\n                  }).then(function(data) {\n                  // data - success message\n                  }).catch(function(error) {\n                  // error - error object\n                  });\n            })\n        }\n        else{\n            client.db.delete(\"asset_mappings\").then(function (data) {\n                client.interface.trigger(\"showNotify\", {\n                    type: \"success\",\n                    message: \"All asset mappings removed successfully\"\n                  /* The \"message\" should be plain text */\n                  }).then(function(data) {\n                  // data - success message\n                  }).catch(function(error) {\n                  // error - error object\n                  });\n            })\n        }\n    \n       \n    }\n\n    showAssetDetails = () => {\n        const {selectedBlock, blocks, showAssetDetails} = this.state\n        if (showAssetDetails && blocks[selectedBlock] && blocks[selectedBlock].associations) {\n            let field = blocks[selectedBlock].associations;\n            return (\n                <OverlayAssetDetail>\n                    <AssetTitle>{field.name}</AssetTitle>\n                    <div className=\"flex row center mt8\">\n                        <Subsection>{field.ci_type_name}</Subsection>\n                        <Splitter></Splitter>\n                        <Subsection>Business Impact : {field.business_impact}</Subsection>\n                    </div>\n                    <div className=\"flex col start mt26 half-width\">\n                        <div className=\"flex row start full-width\">\n                            <Field className=\"half-width\">Name</Field>\n                            <SubField>{field.name}</SubField>\n                        </div>\n                        <div className=\"flex row start mt8 full-width\">\n                            <Field className=\"half-width\">Type</Field>\n                            <SubField>{field.ci_type_name}</SubField>\n                        </div>\n                        <div className=\"flex row start mt8 full-width\">\n                            <Field className=\"half-width\">Impact</Field>\n                            <SubField>{field.business_impact}</SubField>\n                        </div>\n                    </div>\n                </OverlayAssetDetail>\n            )\n        }\n        else return ''\n\n    }\n\n    getAllTickets = () => {\n        const { client } = this.props.params;\n        \n        client.request.get(\"https://<%=iparam.freshservice_subdomain%>.freshservice.com/helpdesk/tickets/filter/all_tickets?format=json&page=1\", {\n            headers: {\n                Authorization: \"Basic <%= encode(iparam.freshservice_api_key)%>\",\n                \"Content-Type\": \"application/json;charset=utf-8\"\n            }\n        })\n            .then(function (res) {\n                let allTickets = JSON.parse(res.response);\n                let allTicketsWithAssets = [] \n                let count = 0;\n                allTickets.forEach((ticket, i) => {\n                    count += 1;\n                    client.db.get(`ticket${ticket.display_id}`).then(function(data){\n                        // for(var prop in data){\n                        //     allTicketsWithAssets.push({ticket, asset: data[prop]})\n                        // }\n                        allTicketsWithAssets.push({ticket, asset: data});\n                        if(i == count-1) {\n                            this.setState({allTickets: allTicketsWithAssets})\n                        }\n                    }.bind(this))\n                    .catch(function (error) {\n                        if(i == count-1) {\n                            allTicketsWithAssets.push({ticket, asset: {}});\n                            this.setState({allTickets: allTicketsWithAssets})\n                        }\n                    }.bind(this));\n                })\n            }.bind(this))\n            .catch(function (error) {\n                console.error(error);\n            });\n    }\n\n    mapAssetDetails = () => {\n        const { client } = this.props.params;\n        \n            client.request.get(\"https://<%=iparam.freshservice_subdomain%>.freshservice.com/cmdb/items.json\", {\n                headers: {\n                    Authorization: \"Basic <%= encode(iparam.freshservice_api_key)%>\",\n                    \"Content-Type\": \"application/json;charset=utf-8\"\n                }\n            })\n            .then(function (res) {\n                this.setState({ allAssets: JSON.parse(res.response), showAllAssets: true })\n            }.bind(this))\n            .catch(function (error) {\n                console.error(error);\n            });\n    }\n\n    viewAssetDetails = (idx) => {\n        const {blocks} = this.state\n        if(blocks[idx].associations){\n            this.setState({showAssetDetails: true})\n        }\n        else{\n            this.mapAssetDetails()\n        }  \n    }\n\n    mapcurrentAsset = (item) => {\n        const {selectedBlock, blocks} = this.state;\n        let allBlocks = cloneDeep(blocks);\n        let updatedSelectedBlock = {...allBlocks[selectedBlock], associations: item}\n        allBlocks[selectedBlock] = updatedSelectedBlock;\n        this.setState({blocks : allBlocks});\n        this.setState({showAllAssets: false});\n        this.setState({showAssetDetails: true});\n    }\n\n    showSelectedAsset =  (item) => {\n        const {selectedBlock, blocks} = this.state;\n        let modifiedBlocks = blocks.map(el => {\n            var arr = [];\n            for(var prop in item.asset) {\n                arr.push(item.asset[prop].id)\n            }\n            return{\n                ...el,\n                color: arr.indexOf(el.associations.display_id) > -1 ? \"#12344D\" : \"\"\n            }\n        });\n        this.setState({blocks: modifiedBlocks});\n    }\n\n    showAllAssets = () => {\n        const {allAssets} = this.state;\n        return(\n            <Overlay>\n                <AssetTypes noHover>\n                    <AssetName>Asset Name</AssetName>\n                    <AssetName>Asset Type</AssetName>\n                    <AssetName>Business Impact</AssetName>\n                </AssetTypes>\n                {allAssets.map(item => {\n                    return(\n                        <AssetTypes onClick={() => {this.mapcurrentAsset(item)}}>\n                            <Asset>{item.name}</Asset>\n                            <Asset>{item.ci_type_name}</Asset>\n                            <Asset>{item.business_impact}</Asset>\n                            {/* <Asset>{item.author_type}</Asset> */}\n                        </AssetTypes>\n                    )\n                })}\n            </Overlay>\n        )\n    }\n\n    showAllTickets = () => {\n        const {allTickets} = this.state;\n        return(\n            <Overlay>\n                <AssetTypes noHover>\n                    <AssetName>Ticket Subject</AssetName>\n                    <AssetName>Requester</AssetName>\n                    <AssetName>Status</AssetName>\n                </AssetTypes>\n                {allTickets.map(item => {\n                    return(\n                        <AssetTypes onClick={() => {this.showSelectedAsset(item)}}>\n                            <Asset style={{textOverflow: \"ellipsis\",overflow: \"hidden\",whiteSpace: \"nowrap\"}} title={item.ticket.subject}>{item.ticket.subject}</Asset>\n                            <Asset>{item.ticket.requester_name}</Asset>\n                            <Asset>{item.ticket.status_name}</Asset>\n                        </AssetTypes>\n                    )\n                })}\n            </Overlay>\n        )\n    }\n\n    toogleTicketOverLay = () => {\n        const {showAllTickets} = this.state;\n        this.setState({showAllTickets: !showAllTickets});\n    }\n\n    renderLegends = () => {\n        let keys = Object.keys(this.styleMap);\n        return(\n            <LegendWrapper>\n            {keys.map(item => {\n                return(\n                    <Legend className=\"flex\">\n                        <Color style={this.styleMap[item]}></Color>\n                        <LegendLabel>{item}</LegendLabel>\n                    </Legend>\n                )\n            })}\n            </LegendWrapper>\n        )\n    }\n    \n\n    render() {\n        const {showAssetDetails, showAllAssets, allowEdit, showAllTickets} = this.state;\n        const {context} = this.props.params;\n        return (\n            <Section>\n                <ReactCrop\n                    src={map}\n                    crop={this.state.crop}\n                    onImageLoaded={this.onImageLoaded}\n                    onComplete={this.onCropComplete}\n                    onChange={this.onCropChange}\n                >\n                {this.renderBlocks()}\n                </ReactCrop>\n                {showAssetDetails && this.showAssetDetails()}\n                {showAllAssets && this.showAllAssets()}\n                {showAllTickets && this.showAllTickets()}\n                {context.data.page == \"hawk_eye\" ? \n                    <Button secondary onClick={() => this.toogleTicketOverLay()}>{showAllTickets ? \"Hide list\" : \"Show list\"}</Button>\n                    :\n                    allowEdit && <Button onClick={() => this.saveMappings()}>Publish</Button>\n                }\n                {context.data.page == \"hawk_eye\" && this.renderLegends()}\n            </Section>\n        )\n    }\n}\n\nconst Section = styled.div`\n    .ReactCrop__image {\n        height: auto !important;\n    }\n`;\n\nconst Legend = styled.div`\n    line-height: 20px;\n    align-items: center;\n    margin-top: 2px;\n`\n\nconst LegendLabel = styled.div`\n\n`\n\nconst LegendWrapper = styled.div`\n    position: absolute;\n    top: 60px;\n    right: 24px;\n    font-size: 14px;\n    color: #12344D;\n`\n\nconst Color = styled.div`\n    margin-right: 10px;\n    height: 12px;\n    width: 12px;\n`\n\nconst OverlayAssetDetail = styled.div`\n    margin: 8px;\n    width: calc(100vw - 38px);\n    padding-left: 20px;\n    background: #FFF;\n    box-shadow: 0 2px 18px 0 rgba(18,52,77,0.16);\n    border: 1px solid #EBEEF0;\n    height: 200px;\n    overflow: scroll;\n    position: absolute;\n    bottom: 0;\n    border-radius: 4px;\n`\n\nconst Subsection = styled.div`\n    opacity: 0.6;\t\n    color: #12344D;\t\n    font-size: 14px;\t\n    line-height: 16px;\t\n    text-align: center;\n\n`\nconst Splitter = styled.div`\n    width: 1px;\n    opacity: 0.6;\t\n    color: #12344D;\t\n    font-size: 14px;\t\n    line-height: 16px;\t\n    text-align: center;\n    border-left: 1px solid #12344D;\n    height: 16px;\n    margin-left: 8px;\n    margin-right: 8px;\n    color: #12344D;\n    opacity: 0.6;\n`\n\nconst Field = styled.div`\t\n    color: #12344D;\t\n    font-size: 13px;\t\n    line-height: 20px;\n`\n\nconst SubField = styled.div`\n    color: #12344D;\t\n    font-size: 13px;\n    font-weight: 600;\t\n    line-height: 20px;\n`\n\nconst Overlay = styled.div`\n    margin: 8px;\n    width: calc(100vw - 18px);\n    background: #FFF;\n    box-shadow: 0 2px 18px 0 rgba(18,52,77,0.16);\n    border: 1px solid #EBEEF0;\n    height: 300px;\n    overflow: scroll;\n    position: absolute;\n    bottom: 0;\n    border-radius: 4px;\n`\n\nconst Asset = styled.div`\n    width: 33.33%;\n    padding: 12px 17px;\n    line-height: 20px;\n    color: #12344D;\n    border-top: 1px solid #EBEEF0;\n    font-size: 14px;\n    font-weight: 500;\n`\n\nconst AssetName = styled.div`\n    width: 50%;\n    padding: 12px 17px;\n    line-height: 20px;\n    color: #12344D;\n    opacity: 0.6;\n    border-top: 1px solid #EBEEF0;\n    font-size: 13px;\t\n    font-weight: 600;\t\n    background: #F5f7f9;\n`\n\nconst AssetTitle = styled.div`\n    font-size: 18px;\t\n    font-weight: bold;\t\n    line-height: 21px;\n    color: #12344D;\n    padding-top: 20px;\n`\n\nconst AssetTypes = styled.div`\n    cursor: pointer;\n    display: flex;\n    align-items:center;\n    background-color: #FFF;\n    border-radius: 4px;\n    ${props => !props.noHover && `\n        &:hover{\n            background-color: #EBEFF3;\n        }\n    `}\n`\n\nconst Block = styled.div`\n    cursor: pointer;\n    position: absolute;\n    transform: ${props => `translate3d(${props.item.x}px,${props.item.y}px,0)`};\n    background-color: ${props => props.color ? props.color : \"#90C6FE\"};\n    border-radius: 2px;\n    border: ${props => props.isSelected ? \"2px solid #2C5CC5\" : \"2px solid transparent\"};\n    width: ${props => props.item.width}px;\n    height: ${props => props.item.height}px;\n`\n\nconst Button = styled.button`\n    z-index:1;\n    position:absolute;\n    top: 8px;\n    right: 8px;\n    padding: 8px 16px;\n    border-radius: 4px;\n    border: 1px solid #dadfe3;\n    box-shadow: 0 2px 4px 0 rgba(18,52,77,0.06), 0 2px 18px 0 rgba(18,52,77,0.16);\n    background-color: ${props => props.secondary ? \"#F3F5F7\" : \"#009A79\"};\n    cursor:pointer;\n    color: ${props => props.secondary ? \"#12344D\" : \"#FFF\"};\n    font-weight: 600;\n    &:hover{\n        border: ${props => props.secondary ? \"1px solid #dadfe3\" : \"1px solid green\"};\n    }\n    &:focus{\n        outline: none;\n    }\n`\n\nexport default Builder","import React from 'react';\nimport './App.css';\nimport Builder from './Builder';\nimport $ from 'jquery';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      context : {},\n      client: {},\n      clientLoaded: false\n    }\n  }\n  componentDidMount(){\n    document.addEventListener('DOMContentLoaded',this.initialiseApp);\n    \n  }\n  initialiseApp = () => {\n    window.app.initialized()\n        .then((_client) => {\n          let client = _client;\n          this.setState({client: client});\n          client.instance.context()\n            .then((context) => {\n              this.setState({context: context, clientLoaded: true})\n            }).catch(function(error) {\n            });\n        })\n  }\n  render(){\n    const {context, client, clientLoaded} = this.state;\n    const params = {\n      context,\n      client\n    }\n    if(clientLoaded)\n      return <Builder params={params}/>\n    else return ''\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}